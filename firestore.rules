rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for field validation
    function isValidUserFields(data) {
      return data.keys().hasOnly(['name', 'email', 'uid', 'publicKey', 'linkedGroupId', 'createdAt']);
    }
    
    function isValidGroupFields(data) {
      return data.keys().hasOnly(['userIds', 'encryptedGroupKeys', 'createdAt']);
    }
    
    function isValidEncryptedTransactionFields(data) {
      // Define allowed fields for encrypted transactions
      let allowedFields = [
        'encryptedTitle',      // Encrypted sensitive field
        'encryptedAmount',     // Encrypted sensitive field  
        'encryptedNotes',      // Encrypted sensitive field (optional)
        'type',               // Plaintext for performance
        'date',               // Plaintext for performance
        'createdAt',          // Plaintext for performance
        'createdBy',          // Plaintext for performance
        'groupId'             // Plaintext for performance
      ];
      
      // Check if all fields are allowed
      return data.keys().hasOnly(allowedFields);
    }
    
    function isValidPlainTransactionFields(data) {
      // Define allowed fields for plain transactions (individual users)
      let allowedFields = [
        'title',              // Plaintext for individual users
        'amount',             // Plaintext for individual users
        'notes',              // Plaintext for individual users (optional)
        'type',               // Plaintext for performance
        'date',               // Plaintext for performance
        'createdAt',          // Plaintext for performance
        'createdBy',          // Plaintext for performance
        'groupId'             // Plaintext for performance
      ];
      
      return data.keys().hasOnly(allowedFields);
    }
    
    function isValidPairCodeFields(data) {
      return data.keys().hasOnly(['generatedBy', 'createdAt', 'expiresAt', 'used']);
    }
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isGroupMember(groupId) {
      return request.auth.uid in resource.data.userIds;
    }
    
    function isGroupMemberOrOwner(groupId) {
      return request.auth.uid in resource.data.userIds || 
             request.auth.uid == resource.data.userIds[0];
    }
    
    function isCodeGenerator(codeId) {
      return request.auth.uid == resource.data.generatedBy;
    }
    
    // User documents
    match /users/{userId} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated() && isOwner(userId) && isValidUserFields(resource.data);
      allow update: if isAuthenticated() && isOwner(userId) && isValidUserFields(resource.data);
      allow delete: if isAuthenticated() && isOwner(userId);
    }
    
    // Group documents
    match /groups/{groupId} {
      allow read: if isAuthenticated() && isGroupMember(groupId);
      allow create: if isAuthenticated() && isValidGroupFields(resource.data);
      allow update: if isAuthenticated() && isGroupMemberOrOwner(groupId) && isValidGroupFields(resource.data);
      allow delete: if isAuthenticated() && isGroupMemberOrOwner(groupId);
      
      // Group transactions - enforce field-level encryption
      match /transactions/{transactionId} {
        allow read: if isAuthenticated() && isGroupMember(get('../../groupId'));
        allow create: if isAuthenticated() && 
                      isGroupMember(get('../../groupId')) && 
                      isValidEncryptedTransactionFields(resource.data) &&
                      // Ensure sensitive fields are actually encrypted (not empty)
                      resource.data.encryptedTitle is string &&
                      resource.data.encryptedTitle.size() > 0 &&
                      resource.data.encryptedAmount is string &&
                      resource.data.encryptedAmount.size() > 0;
        allow update: if isAuthenticated() && 
                      isGroupMember(get('../../groupId')) && 
                      isValidEncryptedTransactionFields(resource.data) &&
                      // Ensure sensitive fields remain encrypted
                      resource.data.encryptedTitle is string &&
                      resource.data.encryptedTitle.size() > 0 &&
                      resource.data.encryptedAmount is string &&
                      resource.data.encryptedAmount.size() > 0;
        allow delete: if isAuthenticated() && isGroupMember(get('../../groupId'));
      }
    }
    
    // Individual user transactions (plaintext for performance)
    match /users/{userId}/transactions/{transactionId} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated() && 
                    isOwner(userId) && 
                    isValidPlainTransactionFields(resource.data);
      allow update: if isAuthenticated() && 
                    isOwner(userId) && 
                    isValidPlainTransactionFields(resource.data);
      allow delete: if isAuthenticated() && isOwner(userId);
    }
    
    // Pair codes
    match /pairCodes/{codeId} {
      allow read: if isAuthenticated() && (isCodeGenerator(codeId) || resource.data.used == false);
      allow create: if isAuthenticated() && isValidPairCodeFields(resource.data);
      allow update: if isAuthenticated() && isCodeGenerator(codeId) && isValidPairCodeFields(resource.data);
      allow delete: if isAuthenticated() && isCodeGenerator(codeId);
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 